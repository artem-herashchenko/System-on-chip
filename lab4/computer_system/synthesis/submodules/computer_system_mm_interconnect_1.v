// computer_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module computer_system_mm_interconnect_1 (
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_awid,                                        //                                       ARM_A9_HPS_h2f_lw_axi_master.awid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_awaddr,                                      //                                                                   .awaddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awlen,                                       //                                                                   .awlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awsize,                                      //                                                                   .awsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awburst,                                     //                                                                   .awburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awlock,                                      //                                                                   .awlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awcache,                                     //                                                                   .awcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awprot,                                      //                                                                   .awprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_awvalid,                                     //                                                                   .awvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_awready,                                     //                                                                   .awready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_wid,                                         //                                                                   .wid
		input  wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_wdata,                                       //                                                                   .wdata
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_wstrb,                                       //                                                                   .wstrb
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wlast,                                       //                                                                   .wlast
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wvalid,                                      //                                                                   .wvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_wready,                                      //                                                                   .wready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_bid,                                         //                                                                   .bid
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_bresp,                                       //                                                                   .bresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_bvalid,                                      //                                                                   .bvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_bready,                                      //                                                                   .bready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_arid,                                        //                                                                   .arid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_araddr,                                      //                                                                   .araddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arlen,                                       //                                                                   .arlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arsize,                                      //                                                                   .arsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arburst,                                     //                                                                   .arburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arlock,                                      //                                                                   .arlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arcache,                                     //                                                                   .arcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arprot,                                      //                                                                   .arprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_arvalid,                                     //                                                                   .arvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_arready,                                     //                                                                   .arready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_rid,                                         //                                                                   .rid
		output wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_rdata,                                       //                                                                   .rdata
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_rresp,                                       //                                                                   .rresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rlast,                                       //                                                                   .rlast
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rvalid,                                      //                                                                   .rvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_rready,                                      //                                                                   .rready
		input  wire        System_PLL_sys_clk_clk,                                                   //                                                 System_PLL_sys_clk.clk
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        SysID_reset_reset_bridge_in_reset_reset,                                  //                                  SysID_reset_reset_bridge_in_reset.reset
		output wire [1:0]  LEDs_s1_address,                                                          //                                                            LEDs_s1.address
		output wire        LEDs_s1_write,                                                            //                                                                   .write
		input  wire [31:0] LEDs_s1_readdata,                                                         //                                                                   .readdata
		output wire [31:0] LEDs_s1_writedata,                                                        //                                                                   .writedata
		output wire        LEDs_s1_chipselect,                                                       //                                                                   .chipselect
		output wire [1:0]  Slider_Switches_s1_address,                                               //                                                 Slider_Switches_s1.address
		input  wire [31:0] Slider_Switches_s1_readdata,                                              //                                                                   .readdata
		output wire [0:0]  SysID_control_slave_address,                                              //                                                SysID_control_slave.address
		input  wire [31:0] SysID_control_slave_readdata                                              //                                                                   .readdata
	);

	wire   [31:0] sysid_control_slave_agent_m0_readdata;                         // SysID_control_slave_translator:uav_readdata -> SysID_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                      // SysID_control_slave_translator:uav_waitrequest -> SysID_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                      // SysID_control_slave_agent:m0_debugaccess -> SysID_control_slave_translator:uav_debugaccess
	wire   [20:0] sysid_control_slave_agent_m0_address;                          // SysID_control_slave_agent:m0_address -> SysID_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                       // SysID_control_slave_agent:m0_byteenable -> SysID_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                             // SysID_control_slave_agent:m0_read -> SysID_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                    // SysID_control_slave_translator:uav_readdatavalid -> SysID_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                             // SysID_control_slave_agent:m0_lock -> SysID_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                        // SysID_control_slave_agent:m0_writedata -> SysID_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                            // SysID_control_slave_agent:m0_write -> SysID_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                       // SysID_control_slave_agent:m0_burstcount -> SysID_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                     // SysID_control_slave_agent:rf_source_valid -> SysID_control_slave_agent_rsp_fifo:in_valid
	wire  [114:0] sysid_control_slave_agent_rf_source_data;                      // SysID_control_slave_agent:rf_source_data -> SysID_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                     // SysID_control_slave_agent_rsp_fifo:in_ready -> SysID_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;             // SysID_control_slave_agent:rf_source_startofpacket -> SysID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;               // SysID_control_slave_agent:rf_source_endofpacket -> SysID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                  // SysID_control_slave_agent_rsp_fifo:out_valid -> SysID_control_slave_agent:rf_sink_valid
	wire  [114:0] sysid_control_slave_agent_rsp_fifo_out_data;                   // SysID_control_slave_agent_rsp_fifo:out_data -> SysID_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                  // SysID_control_slave_agent:rf_sink_ready -> SysID_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;          // SysID_control_slave_agent_rsp_fifo:out_startofpacket -> SysID_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;            // SysID_control_slave_agent_rsp_fifo:out_endofpacket -> SysID_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                // SysID_control_slave_agent:rdata_fifo_src_valid -> SysID_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                 // SysID_control_slave_agent:rdata_fifo_src_data -> SysID_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                // SysID_control_slave_agent_rdata_fifo:in_ready -> SysID_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] leds_s1_agent_m0_readdata;                                     // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                  // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                  // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [20:0] leds_s1_agent_m0_address;                                      // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                   // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                         // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                         // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                    // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                        // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                   // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                 // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [114:0] leds_s1_agent_rf_source_data;                                  // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                 // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                         // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                           // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                              // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [114:0] leds_s1_agent_rsp_fifo_out_data;                               // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                              // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                      // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                        // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          leds_s1_agent_rdata_fifo_src_valid;                            // LEDs_s1_agent:rdata_fifo_src_valid -> LEDs_s1_agent_rdata_fifo:in_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                             // LEDs_s1_agent:rdata_fifo_src_data -> LEDs_s1_agent_rdata_fifo:in_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                            // LEDs_s1_agent_rdata_fifo:in_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire   [31:0] slider_switches_s1_agent_m0_readdata;                          // Slider_Switches_s1_translator:uav_readdata -> Slider_Switches_s1_agent:m0_readdata
	wire          slider_switches_s1_agent_m0_waitrequest;                       // Slider_Switches_s1_translator:uav_waitrequest -> Slider_Switches_s1_agent:m0_waitrequest
	wire          slider_switches_s1_agent_m0_debugaccess;                       // Slider_Switches_s1_agent:m0_debugaccess -> Slider_Switches_s1_translator:uav_debugaccess
	wire   [20:0] slider_switches_s1_agent_m0_address;                           // Slider_Switches_s1_agent:m0_address -> Slider_Switches_s1_translator:uav_address
	wire    [3:0] slider_switches_s1_agent_m0_byteenable;                        // Slider_Switches_s1_agent:m0_byteenable -> Slider_Switches_s1_translator:uav_byteenable
	wire          slider_switches_s1_agent_m0_read;                              // Slider_Switches_s1_agent:m0_read -> Slider_Switches_s1_translator:uav_read
	wire          slider_switches_s1_agent_m0_readdatavalid;                     // Slider_Switches_s1_translator:uav_readdatavalid -> Slider_Switches_s1_agent:m0_readdatavalid
	wire          slider_switches_s1_agent_m0_lock;                              // Slider_Switches_s1_agent:m0_lock -> Slider_Switches_s1_translator:uav_lock
	wire   [31:0] slider_switches_s1_agent_m0_writedata;                         // Slider_Switches_s1_agent:m0_writedata -> Slider_Switches_s1_translator:uav_writedata
	wire          slider_switches_s1_agent_m0_write;                             // Slider_Switches_s1_agent:m0_write -> Slider_Switches_s1_translator:uav_write
	wire    [2:0] slider_switches_s1_agent_m0_burstcount;                        // Slider_Switches_s1_agent:m0_burstcount -> Slider_Switches_s1_translator:uav_burstcount
	wire          slider_switches_s1_agent_rf_source_valid;                      // Slider_Switches_s1_agent:rf_source_valid -> Slider_Switches_s1_agent_rsp_fifo:in_valid
	wire  [114:0] slider_switches_s1_agent_rf_source_data;                       // Slider_Switches_s1_agent:rf_source_data -> Slider_Switches_s1_agent_rsp_fifo:in_data
	wire          slider_switches_s1_agent_rf_source_ready;                      // Slider_Switches_s1_agent_rsp_fifo:in_ready -> Slider_Switches_s1_agent:rf_source_ready
	wire          slider_switches_s1_agent_rf_source_startofpacket;              // Slider_Switches_s1_agent:rf_source_startofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          slider_switches_s1_agent_rf_source_endofpacket;                // Slider_Switches_s1_agent:rf_source_endofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_valid;                   // Slider_Switches_s1_agent_rsp_fifo:out_valid -> Slider_Switches_s1_agent:rf_sink_valid
	wire  [114:0] slider_switches_s1_agent_rsp_fifo_out_data;                    // Slider_Switches_s1_agent_rsp_fifo:out_data -> Slider_Switches_s1_agent:rf_sink_data
	wire          slider_switches_s1_agent_rsp_fifo_out_ready;                   // Slider_Switches_s1_agent:rf_sink_ready -> Slider_Switches_s1_agent_rsp_fifo:out_ready
	wire          slider_switches_s1_agent_rsp_fifo_out_startofpacket;           // Slider_Switches_s1_agent_rsp_fifo:out_startofpacket -> Slider_Switches_s1_agent:rf_sink_startofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_endofpacket;             // Slider_Switches_s1_agent_rsp_fifo:out_endofpacket -> Slider_Switches_s1_agent:rf_sink_endofpacket
	wire          slider_switches_s1_agent_rdata_fifo_src_valid;                 // Slider_Switches_s1_agent:rdata_fifo_src_valid -> Slider_Switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_src_data;                  // Slider_Switches_s1_agent:rdata_fifo_src_data -> Slider_Switches_s1_agent_rdata_fifo:in_data
	wire          slider_switches_s1_agent_rdata_fifo_src_ready;                 // Slider_Switches_s1_agent_rdata_fifo:in_ready -> Slider_Switches_s1_agent:rdata_fifo_src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;             // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [113:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;              // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;             // router:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;     // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;       // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;              // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [113:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;               // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;              // router_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;      // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;        // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                            // SysID_control_slave_agent:rp_valid -> router_002:sink_valid
	wire  [113:0] sysid_control_slave_agent_rp_data;                             // SysID_control_slave_agent:rp_data -> router_002:sink_data
	wire          sysid_control_slave_agent_rp_ready;                            // router_002:sink_ready -> SysID_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                    // SysID_control_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                      // SysID_control_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                          // router_002:src_valid -> rsp_demux:sink_valid
	wire  [113:0] router_002_src_data;                                           // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                          // rsp_demux:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                        // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                  // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                    // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                        // LEDs_s1_agent:rp_valid -> router_003:sink_valid
	wire  [113:0] leds_s1_agent_rp_data;                                         // LEDs_s1_agent:rp_data -> router_003:sink_data
	wire          leds_s1_agent_rp_ready;                                        // router_003:sink_ready -> LEDs_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                // LEDs_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                  // LEDs_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                          // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [113:0] router_003_src_data;                                           // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                          // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                        // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                  // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                    // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          slider_switches_s1_agent_rp_valid;                             // Slider_Switches_s1_agent:rp_valid -> router_004:sink_valid
	wire  [113:0] slider_switches_s1_agent_rp_data;                              // Slider_Switches_s1_agent:rp_data -> router_004:sink_data
	wire          slider_switches_s1_agent_rp_ready;                             // router_004:sink_ready -> Slider_Switches_s1_agent:rp_ready
	wire          slider_switches_s1_agent_rp_startofpacket;                     // Slider_Switches_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          slider_switches_s1_agent_rp_endofpacket;                       // Slider_Switches_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                          // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [113:0] router_004_src_data;                                           // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                          // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                        // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                  // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                    // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_src_valid;                                              // router:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [113:0] router_src_data;                                               // router:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                              // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                            // router:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                      // router:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                        // router:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [113:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;          // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;         // cmd_demux:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [2:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket; // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;   // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                             // rsp_mux:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [113:0] rsp_mux_src_data;                                              // rsp_mux:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                             // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                           // rsp_mux:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                     // rsp_mux:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                       // rsp_mux:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;         // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_valid
	wire  [113:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;          // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;         // ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [2:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket; // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;   // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                          // router_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [113:0] router_001_src_data;                                           // router_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                          // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                        // router_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                  // router_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                    // router_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [113:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;          // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;         // cmd_demux_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [2:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket; // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;   // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                         // rsp_mux_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [113:0] rsp_mux_001_src_data;                                          // rsp_mux_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                         // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                       // rsp_mux_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                 // rsp_mux_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                   // rsp_mux_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;         // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_valid
	wire  [113:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;          // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;         // ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [2:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket; // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;   // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                             // cmd_mux:src_valid -> SysID_control_slave_burst_adapter:sink0_valid
	wire  [113:0] cmd_mux_src_data;                                              // cmd_mux:src_data -> SysID_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                             // SysID_control_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                           // cmd_mux:src_channel -> SysID_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                     // cmd_mux:src_startofpacket -> SysID_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                       // cmd_mux:src_endofpacket -> SysID_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_control_slave_burst_adapter_source0_valid;               // SysID_control_slave_burst_adapter:source0_valid -> SysID_control_slave_agent:cp_valid
	wire  [113:0] sysid_control_slave_burst_adapter_source0_data;                // SysID_control_slave_burst_adapter:source0_data -> SysID_control_slave_agent:cp_data
	wire          sysid_control_slave_burst_adapter_source0_ready;               // SysID_control_slave_agent:cp_ready -> SysID_control_slave_burst_adapter:source0_ready
	wire    [2:0] sysid_control_slave_burst_adapter_source0_channel;             // SysID_control_slave_burst_adapter:source0_channel -> SysID_control_slave_agent:cp_channel
	wire          sysid_control_slave_burst_adapter_source0_startofpacket;       // SysID_control_slave_burst_adapter:source0_startofpacket -> SysID_control_slave_agent:cp_startofpacket
	wire          sysid_control_slave_burst_adapter_source0_endofpacket;         // SysID_control_slave_burst_adapter:source0_endofpacket -> SysID_control_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                         // cmd_mux_001:src_valid -> LEDs_s1_burst_adapter:sink0_valid
	wire  [113:0] cmd_mux_001_src_data;                                          // cmd_mux_001:src_data -> LEDs_s1_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                         // LEDs_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                       // cmd_mux_001:src_channel -> LEDs_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                 // cmd_mux_001:src_startofpacket -> LEDs_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                   // cmd_mux_001:src_endofpacket -> LEDs_s1_burst_adapter:sink0_endofpacket
	wire          leds_s1_burst_adapter_source0_valid;                           // LEDs_s1_burst_adapter:source0_valid -> LEDs_s1_agent:cp_valid
	wire  [113:0] leds_s1_burst_adapter_source0_data;                            // LEDs_s1_burst_adapter:source0_data -> LEDs_s1_agent:cp_data
	wire          leds_s1_burst_adapter_source0_ready;                           // LEDs_s1_agent:cp_ready -> LEDs_s1_burst_adapter:source0_ready
	wire    [2:0] leds_s1_burst_adapter_source0_channel;                         // LEDs_s1_burst_adapter:source0_channel -> LEDs_s1_agent:cp_channel
	wire          leds_s1_burst_adapter_source0_startofpacket;                   // LEDs_s1_burst_adapter:source0_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire          leds_s1_burst_adapter_source0_endofpacket;                     // LEDs_s1_burst_adapter:source0_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                         // cmd_mux_002:src_valid -> Slider_Switches_s1_burst_adapter:sink0_valid
	wire  [113:0] cmd_mux_002_src_data;                                          // cmd_mux_002:src_data -> Slider_Switches_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                         // Slider_Switches_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [2:0] cmd_mux_002_src_channel;                                       // cmd_mux_002:src_channel -> Slider_Switches_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                 // cmd_mux_002:src_startofpacket -> Slider_Switches_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                   // cmd_mux_002:src_endofpacket -> Slider_Switches_s1_burst_adapter:sink0_endofpacket
	wire          slider_switches_s1_burst_adapter_source0_valid;                // Slider_Switches_s1_burst_adapter:source0_valid -> Slider_Switches_s1_agent:cp_valid
	wire  [113:0] slider_switches_s1_burst_adapter_source0_data;                 // Slider_Switches_s1_burst_adapter:source0_data -> Slider_Switches_s1_agent:cp_data
	wire          slider_switches_s1_burst_adapter_source0_ready;                // Slider_Switches_s1_agent:cp_ready -> Slider_Switches_s1_burst_adapter:source0_ready
	wire    [2:0] slider_switches_s1_burst_adapter_source0_channel;              // Slider_Switches_s1_burst_adapter:source0_channel -> Slider_Switches_s1_agent:cp_channel
	wire          slider_switches_s1_burst_adapter_source0_startofpacket;        // Slider_Switches_s1_burst_adapter:source0_startofpacket -> Slider_Switches_s1_agent:cp_startofpacket
	wire          slider_switches_s1_burst_adapter_source0_endofpacket;          // Slider_Switches_s1_burst_adapter:source0_endofpacket -> Slider_Switches_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [113:0] cmd_demux_src0_data;                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                          // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [113:0] cmd_demux_src1_data;                                           // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                          // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [2:0] cmd_demux_src1_channel;                                        // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                  // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                    // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                          // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [113:0] cmd_demux_src2_data;                                           // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                          // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [2:0] cmd_demux_src2_channel;                                        // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                  // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                    // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                      // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [113:0] cmd_demux_001_src0_data;                                       // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                      // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                    // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                              // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                      // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [113:0] cmd_demux_001_src1_data;                                       // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                      // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [2:0] cmd_demux_001_src1_channel;                                    // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                              // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                      // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [113:0] cmd_demux_001_src2_data;                                       // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                      // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [2:0] cmd_demux_001_src2_channel;                                    // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                              // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [113:0] rsp_demux_src0_data;                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                          // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [113:0] rsp_demux_src1_data;                                           // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                          // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                        // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                  // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                    // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                      // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [113:0] rsp_demux_001_src0_data;                                       // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                      // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                    // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                              // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                      // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [113:0] rsp_demux_001_src1_data;                                       // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                      // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [2:0] rsp_demux_001_src1_channel;                                    // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                              // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                      // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [113:0] rsp_demux_002_src0_data;                                       // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                      // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [2:0] rsp_demux_002_src0_channel;                                    // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                              // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                      // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [113:0] rsp_demux_002_src1_data;                                       // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                      // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [2:0] rsp_demux_002_src1_channel;                                    // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                              // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire    [2:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;        // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [2:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;        // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                // SysID_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                 // SysID_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                // avalon_st_adapter:in_0_ready -> SysID_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                 // avalon_st_adapter:out_0_valid -> SysID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                  // avalon_st_adapter:out_0_data -> SysID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                 // SysID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                 // avalon_st_adapter:out_0_error -> SysID_control_slave_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_out_valid;                            // LEDs_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_out_data;                             // LEDs_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          leds_s1_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_001:in_0_ready -> LEDs_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                             // avalon_st_adapter_001:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                              // avalon_st_adapter_001:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                             // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                             // avalon_st_adapter_001:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire          slider_switches_s1_agent_rdata_fifo_out_valid;                 // Slider_Switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_out_data;                  // Slider_Switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          slider_switches_s1_agent_rdata_fifo_out_ready;                 // avalon_st_adapter_002:in_0_ready -> Slider_Switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                             // avalon_st_adapter_002:out_0_valid -> Slider_Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                              // avalon_st_adapter_002:out_0_data -> Slider_Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                             // Slider_Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                             // avalon_st_adapter_002:out_0_error -> Slider_Switches_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                     //                      clk.clk
		.reset                  (SysID_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SysID_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (SysID_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SysID_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                   //                         .read
		.uav_write              (leds_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (LEDs_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                           //                         .write
		.av_readdata            (LEDs_s1_readdata),                        //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                       //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slider_switches_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                    //                      clk.clk
		.reset                  (SysID_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (slider_switches_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (slider_switches_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (slider_switches_s1_agent_m0_read),          //                         .read
		.uav_write              (slider_switches_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (slider_switches_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (slider_switches_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (slider_switches_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (slider_switches_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (slider_switches_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (slider_switches_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (slider_switches_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Slider_Switches_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (Slider_Switches_s1_readdata),               //                         .readdata
		.av_write               (),                                          //              (terminated)
		.av_read                (),                                          //              (terminated)
		.av_writedata           (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (90),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (3),
		.ID                        (0)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                    //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (ARM_A9_HPS_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (ARM_A9_HPS_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (ARM_A9_HPS_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (ARM_A9_HPS_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (ARM_A9_HPS_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                  //             clk.clk
		.reset                   (SysID_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (SysID_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (SysID_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                      //             clk.clk
		.reset                   (SysID_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (leds_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (leds_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (leds_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (leds_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (leds_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (leds_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),           //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset             (SysID_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),             //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SysID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (leds_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (leds_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (leds_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (leds_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (leds_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) slider_switches_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (SysID_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (slider_switches_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (slider_switches_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (slider_switches_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (slider_switches_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (slider_switches_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (slider_switches_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (slider_switches_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (slider_switches_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (slider_switches_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (slider_switches_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (slider_switches_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (slider_switches_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (slider_switches_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (slider_switches_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (slider_switches_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (slider_switches_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (slider_switches_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (slider_switches_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (slider_switches_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (slider_switches_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (slider_switches_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (slider_switches_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (slider_switches_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (slider_switches_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (slider_switches_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (slider_switches_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (slider_switches_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (slider_switches_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (slider_switches_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (slider_switches_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (slider_switches_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (slider_switches_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (slider_switches_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slider_switches_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (slider_switches_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                              //       clk.clk
		.reset             (SysID_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (slider_switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (slider_switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slider_switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slider_switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slider_switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slider_switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slider_switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slider_switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slider_switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (SysID_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (slider_switches_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (slider_switches_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (slider_switches_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (slider_switches_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (slider_switches_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	computer_system_mm_interconnect_1_router router (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	computer_system_mm_interconnect_1_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                     //       src.ready
		.src_valid          (router_001_src_valid),                                                     //          .valid
		.src_data           (router_001_src_data),                                                      //          .data
		.src_channel        (router_001_src_channel),                                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                //          .endofpacket
	);

	computer_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                     //       clk.clk
		.reset              (SysID_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_002_src_ready),                       //       src.ready
		.src_valid          (router_002_src_valid),                       //          .valid
		.src_data           (router_002_src_data),                        //          .data
		.src_channel        (router_002_src_channel),                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                  //          .endofpacket
	);

	computer_system_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (leds_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                  //          .valid
		.sink_data          (leds_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SysID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                    //       src.ready
		.src_valid          (router_003_src_valid),                    //          .valid
		.src_data           (router_003_src_data),                     //          .data
		.src_channel        (router_003_src_channel),                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)               //          .endofpacket
	);

	computer_system_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (slider_switches_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (slider_switches_s1_agent_rp_valid),         //          .valid
		.sink_data          (slider_switches_s1_agent_rp_data),          //          .data
		.sink_startofpacket (slider_switches_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (slider_switches_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset              (SysID_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_004_src_ready),                      //       src.ready
		.src_valid          (router_004_src_valid),                      //          .valid
		.src_data           (router_004_src_data),                       //          .data
		.src_channel        (router_004_src_channel),                    //          .channel
		.src_startofpacket  (router_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                         //          .valid
		.cmd_sink_data          (router_src_data),                                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                   //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                        //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                        //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                      //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                         //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                  //       cr0.clk
		.reset                 (SysID_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //          .ready
		.source0_valid         (sysid_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) leds_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                      //       cr0.clk
		.reset                 (SysID_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                       //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                        //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                     //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                       //          .ready
		.source0_valid         (leds_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (leds_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (leds_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (leds_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (leds_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (leds_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) slider_switches_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                 //       cr0.clk
		.reset                 (SysID_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                  //          .ready
		.source0_valid         (slider_switches_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (slider_switches_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (slider_switches_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (slider_switches_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (slider_switches_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (slider_switches_s1_burst_adapter_source0_ready)          //          .ready
	);

	computer_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                     //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                     //           .valid
		.src0_data          (cmd_demux_src0_data),                                                      //           .data
		.src0_channel       (cmd_demux_src0_channel),                                                   //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                             //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                               //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                     //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                     //           .valid
		.src1_data          (cmd_demux_src1_data),                                                      //           .data
		.src1_channel       (cmd_demux_src1_channel),                                                   //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                             //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                               //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                     //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                     //           .valid
		.src2_data          (cmd_demux_src2_data),                                                      //           .data
		.src2_channel       (cmd_demux_src2_channel),                                                   //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                             //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                                //           .endofpacket
	);

	computer_system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                                 //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                                 //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                                  //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                               //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                           //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                                 //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                                 //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                                  //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                               //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                           //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                                 //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                                 //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                                  //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                               //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                                            //           .endofpacket
	);

	computer_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SysID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	computer_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SysID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)           //          .endofpacket
	);

	computer_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SysID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)           //          .endofpacket
	);

	computer_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SysID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)               //          .endofpacket
	);

	computer_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SysID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                    //      sink.ready
		.sink_channel       (router_003_src_channel),                  //          .channel
		.sink_data          (router_003_src_data),                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_003_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)           //          .endofpacket
	);

	computer_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SysID_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)           //          .endofpacket
	);

	computer_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                        //          .valid
		.src_data            (rsp_mux_src_data),                                                         //          .data
		.src_channel         (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                 //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                 //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                               //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                  //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                           //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                 //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                 //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                               //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                  //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                                            //          .endofpacket
	);

	computer_system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_001_src_data),                                                     //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                     //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                     //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                                   //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                      //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                                 //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                                 //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                               //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                                  //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                           //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                                 //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                                 //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                               //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                                  //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket)                                            //          .endofpacket
	);

	computer_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (SysID_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                   //         .error
	);

	computer_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SysID_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)        //         .error
	);

	computer_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (SysID_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (slider_switches_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (slider_switches_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (slider_switches_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)              //         .error
	);

endmodule
